const DEFAULT_BASE = "http://127.0.0.1:1234";
const DEFAULT_MODEL = "lmstudio";

type Msg = { role: "system" | "user" | "assistant"; content: string };

export async function chatOnce({
  message, system = "", model = DEFAULT_MODEL, baseUrl = DEFAULT_BASE,
}: { message: string; system?: string; model?: string; baseUrl?: string; }): Promise<string> {
  const res = await fetch(`${baseUrl}/v1/chat/completions`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      model, stream: false,
      messages: [
        ...(system ? [{ role: "system", content: system } as Msg] : []),
        { role: "user", content: message } as Msg,
      ],
    }),
  });
  if (!res.ok) throw new Error(await res.text());
  const data: any = await res.json();
  return String(data?.choices?.[0]?.message?.content ?? "");
}

export async function chatStream({
  message, system = "", model = DEFAULT_MODEL, baseUrl = DEFAULT_BASE, onChunk,
}: { message: string; system?: string; model?: string; baseUrl?: string; onChunk: (t: string) => void; }): Promise<void> {
  const res = await fetch(`${baseUrl}/v1/chat/completions`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      model, stream: true,
      messages: [
        ...(system ? [{ role: "system", content: system } as Msg] : []),
        { role: "user", content: message } as Msg,
      ],
    }),
  });
  if (!res.ok || !res.body) throw new Error(await res.text());
  const reader = res.body.getReader();
  const dec = new TextDecoder();
  let done = false, buf = "";
  while (!done) {
    const { value, done: d } = await reader.read(); done = d;
    if (value) {
      buf += dec.decode(value, { stream: !done });
      const lines = buf.split(/\r?\n/);
      buf = lines.pop() || "";
      for (const line of lines) {
        const s = line.replace(/^data:\s?/, "").trim();
        if (!s || s === "[DONE]") continue;
        try {
          const j = JSON.parse(s);
          const delta = j?.choices?.[0]?.delta?.content ?? "";
          if (delta) onChunk(String(delta));
        } catch {
          onChunk(s);
        }
      }
    }
  }
}

// alias for server SSE
export const stream = chatStream;
